"ONE LINE PYTHON DECODER: for those who are not olp enjoyers" and (globals().update(sys = __import__("sys")) or globals().update(temp = []) or globals().update(tradimport = lambda l: (["import "+name if any([name+s+"="+s+"__import__("+q+name+q+")" == l for q in ["\"", "'"] for s in ["", " "]]) else l for name in [l.split("=")[0].strip()]][0]) if "=" in l else l) or globals().update(join = lambda c: globals().update(tmp = [c[i] if c[i].count('(') == c[i].count(')') else (c[i] + " or " + c[i+1] if c[i].count('(') > c[i].count(')') else c[i]) for i in range(len(c))]) or [tmp[i] for i in range(len(tmp)) if tmp[i] is not None and tmp[i] not in tmp[i-1]]) or globals().update(cleanchunk = lambda chunk: __import__("olp").primitives["while"](locals(), "chunk.strip().startswith('(') and chunk.strip().endswith(')')", "globals().update(chunk = chunk[:chunk.index(chunk.strip())] + chunk.strip()[1:-1])")["chunk"]) or globals().update(parseif = lambda c: globals().update(tmp = []) or [tmp.append(i[i.rindex("if"):-11]+":") or tmp.append("    "+i[:i.rindex("if")]) if i.endswith("else False") else tmp.append(i) for i in c][0] or tmp) or globals().update(parsequit = lambda c: globals().update(tmp = []) or [tmp.append(i[:-7]) or tmp.append(i[:i.index(i.strip())] + "quit()") if i.endswith("or True") else tmp.append(i) for i in c][0] or tmp) or ((print("Usage: oldec <file>") or True) if len(sys.argv) < 2 else False) or globals().update(chunks = open(sys.argv[1], 'r').read().split(" or ")) or globals().update(chunks = __import__("olp").primitives["dowhile"](globals(), "chunks != temp", "globals().update(temp = chunks) or globals().update(chunks = join(chunks))")["chunks"] ) or globals().update(chunks = [cleanchunk(chunk) for chunk in chunks]) or globals().update(chunks = parseif(chunks)) or globals().update(chunks = [cleanchunk(chunk) for chunk in chunks]) or globals().update(chunks = parsequit(chunks)) or globals().update(lines = [chunk[:chunk.index(chunk.strip())]+tradimport(chunk.strip()[17:-1]) if chunk.strip().startswith("globals().update(") else (cleanchunk(chunk) if chunk.strip().startswith("(") else chunk) for chunk in chunks]) or [print(line) for line in lines])
